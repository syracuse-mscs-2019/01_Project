(**************************)
(* Basic values and types *)
(**************************)
1;
true;
"This is a string";

(**********************************************)
(* Explicitly specifying types in expressions *)
(**********************************************)
2 : int;
false : bool;
"Another string" : string;

(*********************)
(* Basic type errors *)
(*********************)
0 : bool;
false : string;
"1" : int;

(***********************)
(* Compound expression *)
(***********************)

(************************************************)
(* a pair consisting of a string and an integer *)
(************************************************)
("A",0);

(**********************************************************)
(* a 3-tuple consisting of a string, integer, and boolean *)
(**********************************************************)
("B",1,false);

(*************)
(* a 4-tuple *)
(*************)
("B",(1,2),false,12);

(**********************************)
(* A type error within an n-tuple *)
(**********************************)
(1,false,"A") : bool * string * int;

(****************************)
(* A list of integers in ML *)
(****************************)
[1,2,3,4,5];

(************************************)
(* A list of bool * int pairs in ML *)
(************************************)
[(false,0), (false, 4), (true, 1), (false, 3)];

(********************************************************)
(* An ill-formed list where the elements differ in type *)
(********************************************************)
[1,true];

(*****************************)
(* Giving names to constants *)
(*****************************)
val x1 = 42;
val x2 = ~42;
val x3 = x1 + x2;
x1;
x2;
x3;
val y1 = (true,12);
val y2 = (false, 0);
val y3 = [y1,y2];
y1;
y2;
y3;

(*****************************************************)
(* If a variable name is undefined, HOL/ML complains *)
(*****************************************************)
foo;

(***************************************)
(* Type clashes are detected as before *)
(***************************************)
[x1,x2,y1];

(*********************************************)
(* Value declarations using pattern-matching *)
(*********************************************)

(*********************************)
(* Pattern matching on a 3-tuple *)
(*********************************)
val (a1,a2,a3) = (1,true,"Alice");

(*****************************)
(* Pattern matching on lists *)
(*****************************)
val [c1,c2,c3,c4] = [2,4,6,8];
2 :: [];
2 :: [4,6,8];
2 ::(4 :: (6 :: (8 :: [])));

val (c :: cs) = [2,4,6,8];
val (d :: ds) = [3];

(**************************)
(* Mismatches in patterns *)
(**************************)
val (e :: es) = [];
val (f1,f2) = (1,2,3);